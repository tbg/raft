initSidebarItems({"enum":[["Error","Things that can go wrong when you read a message."],["OutputSegments","Helper struct that allows `MessageBuilder::get_segments_for_output()` to avoid heap allocations in the single-segment case."]],"mod":[["any_pointer","Dynamically typed value."],["capability","Hooks for for the RPC system."],["data","Sequence of bytes."],["data_list","List of sequences of bytes."],["enum_list","List of enums."],["list_list","List of lists."],["message","Untyped root container for a Cap'n Proto value."],["primitive_list","List of primitives."],["private","Implementation details that should never be directly used by clients."],["serialize","Reading and writing of messages using the standard stream framing."],["serialize_packed","Reading and writing of messages using the packed stream encoding."],["struct_list","List of structs."],["text","UTF-8 encoded text."],["text_list","List of strings containing UTF-8 encoded text."],["traits",""]],"struct":[["MessageSize","Size of a message. Every generated struct has a method `.total_size()` that returns this."],["NotInSchema","An enum value or union discriminant that was not found among those defined in a schema."],["Word","Eight bytes of memory with opaque interior."]],"type":[["Result","Because messages are lazily validated, the return type of any method that reads a pointer field must be wrapped in a Result."]]});